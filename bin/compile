#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

set -e
set -o pipefail

# Nginx 1.6.2
NGINX_VERSION="1.6.2"
NGINX_TARBALL="nginx-${NGINX_VERSION}.tar.gz"
PCRE_VERSION="8.36"
PCRE_TARBALL="pcre-${PCRE_VERSION}.tar.gz"
ZLIB_VERSION="1.2.8"
ZLIB_TARBALL="zlib-${ZLIB_VERSION}.tar.gz"

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
CUR_DIR=`cd $(dirname $0); cd ..; pwd`

NODEJS_VERSION=$(curl --silent --get --data-urlencode "range=${node_engine}" https://semver.herokuapp.com/node/resolve)
NODEJS_URL="http://s3pository.heroku.com/node/v$NODEJS_VERSION/node-v$NODEJS_VERSION-linux-x64.tar.gz"


mkdir -p $BUILD_DIR $CACHE_DIR

if [[ ! -e "$BUILD_DIR/www" ]]; then
  echo "-----> copy static files to www"
  rm -rf $CACHE_DIR/www
  mkdir -p $CACHE_DIR/www
  mv $BUILD_DIR/* $CACHE_DIR/www
  mkdir -p $BUILD_DIR/www
  mv $CACHE_DIR/www/* $BUILD_DIR/www
  [[ -f "$BUILD_DIR/www/CHECKS" ]] && mv $BUILD_DIR/www/CHECKS $BUILD_DIR
  rm -rf $CACHE_DIR/www
fi

cd $CACHE_DIR

if [[ ! -d "${NGINX_TARBALL%.tar.gz}" ]]; then
  echo "-----> download and unzip nginx"
  curl "http://nginx.org/download/${NGINX_TARBALL}" -o "${NGINX_TARBALL}"
  tar xzf "${NGINX_TARBALL}" && rm -f "${NGINX_TARBALL}"
fi

if [[ ! -d "${PCRE_TARBALL%.tar.gz}" ]]; then
  echo "-----> download and unzip pcre"
  curl "http://ftp.csx.cam.ac.uk/pub/software/programming/pcre/${PCRE_TARBALL}" -o "${PCRE_TARBALL}"
  tar xzf "${PCRE_TARBALL}" && rm -f "${PCRE_TARBALL}"
fi

if [[ ! -d "${ZLIB_TARBALL%.tar.gz}" ]]; then
  echo "-----> download and unzip zlib"
  curl "http://zlib.net/${ZLIB_TARBALL}" -o "${ZLIB_TARBALL}"
  tar xzf "${ZLIB_TARBALL}" && rm -rf "${ZLIB_TARBALL}"
fi

cd "nginx-${NGINX_VERSION}"
if [[ ! -f "${CACHE_DIR}/bin/nginx" ]]; then
  echo "-----> compile static nginx"
  mkdir $BUILD_DIR/nginx
  ./configure \
    --with-cpu-opt=generic \
    --prefix=$BUILD_DIR/nginx \
    --with-pcre=../pcre-${PCRE_VERSION} \
    --sbin-path=. \
    --pid-path=./nginx.pid \
    --conf-path=./nginx.conf \
    --with-ld-opt="-static" \
    --with-http_spdy_module \
    --with-http_stub_status_module \
    --with-http_gzip_static_module \
    --with-file-aio \
    --with-zlib=../zlib-${ZLIB_VERSION} \
    --with-pcre \
    --with-cc-opt="-O2 -static -static-libgcc" \
    --without-http_charset_module \
    --without-http_ssi_module \
    --without-http_userid_module \
    --without-http_access_module \
    --without-http_auth_basic_module \
    --without-http_autoindex_module \
    --without-http_geo_module \
    --without-http_map_module \
    --without-http_split_clients_module \
    --without-http_referer_module \
    --without-http_proxy_module \
    --without-http_fastcgi_module \
    --without-http_uwsgi_module \
    --without-http_scgi_module \
    --without-http_memcached_module \
    --without-http_empty_gif_module \
    --without-http_browser_module \
    --without-http_upstream_ip_hash_module \
    --without-http_upstream_least_conn_module \
    --without-http_upstream_keepalive_module \
    --without-mail_pop3_module \
    --without-mail_imap_module \
    --without-mail_smtp_module

  sed -i "/CFLAGS/s/ \-O //g" objs/Makefile

  make && make install

  rm -rf $CACHE_DIR/bin && mkdir -p $CACHE_DIR/bin/
  cp -r $BUILD_DIR/nginx/* $CACHE_DIR/bin/

else
  echo "-----> reuse nginx from cache"
  mkdir -p $BUILD_DIR/nginx
  cp -r $CACHE_DIR/bin/* $BUILD_DIR/nginx/
fi


echo "-----> Installing NodeJS and dependecies"
curl $NODEJS_URL -s -o - | tar xzf - -C $BUILD_DIR

# Move node (and npm) into ./vendor and make them executable
mkdir -p $BUILD_DIR/vendor
mv $BUILD_DIR/node-v$NODE_VERSION-linux-x64 $BUILD_DIR/vendor/node
chmod +x $BUILD_DIR/vendor/node/bin/*
PATH=$BUILD_DIR/vendor/node/bin:$PATH

echo `node --version`
echo `npm --version`
echo "-----> NodeJS installed"


cd $BUILD_DIR/www
sleep 10

echo '-----> Installing packages'
if [ -f "package.json" ]
then
    npm install
else
    echo "No package.json found"
fi

echo '-----> Installing Bower'
if [ -f "./node_modules/bower/bin/bower" ]
then
  echo 'Bower already installed. Skipping...'
else
  npm install bower
fi

echo '-----> Installing Bower Packages'
if [ -f "./bower.json" ]
then
  ./node_modules/bower/bin/bower install --allow-root
else
  echo 'bower.json missing. Nothing to install...'
fi

echo '-----> Installing grunt-cli'
if [ -f "./node_modules/grunt-cli/bin/grunt" ]
then
  echo 'grunt-cli already installed. Skipping...'
else
  npm install grunt-cli
fi

echo '-----> Runnging Tasks'
if [ -f "./Gruntfile.js" ]
then
  ./node_modules/grunt-cli/bin/grunt build --force
else
  echo 'Gruntfile.js is missing. No tasks to run...'
fi


cd $CUR_DIR

# build nginx config unless overridden by user
#if [ ! -f $BUILD_DIR/nginx/nginx.conf ] ; then
echo "-----> using default nginx.conf.erb"
cp conf/nginx.conf.erb $BUILD_DIR/nginx/nginx.conf.erb
#fi

# build mime.types unless overridden by user
#if [ ! -f $BUILD_DIR/mime.types ] ; then
echo "-----> using default mime.types"
cp conf/mime.types $BUILD_DIR/nginx/mime.types
#fi

# check if it's require to have nodejs for grunt/bower


# build a startup script
cat <<EOF >"$BUILD_DIR/start_nginx"
#!/usr/bin/env bash
rm -f /app/nginx/nginx.conf
erb /app/nginx/nginx.conf.erb > /app/nginx/nginx.conf
exec nginx -p /app/nginx -c /app/nginx/nginx.conf
EOF
chmod +x "$BUILD_DIR/start_nginx"
